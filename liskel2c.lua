_osname = 'Liskel OS' _osversion = '2.1' function require(pkg) if type(pkg) ~= 'string' then return nil end return _ENV[pkg] or _G[pkg] end setmetatable(component,{__index = function(_,k) return component.getPrimary(k) end}) fsaddr = component.invoke(component.list("eeprom")(),"getData") function component.getPrimary(dev) if dev == 'filesystem' then return component.proxy(fsaddr) end for k,v in component.list() do if v == dev then return component.proxy(k) end end end g = {} function g.bind() local screen = component.list('screen')() return component.gpu.bind(screen) end function g.available() local gpu,screen = component.list('gpu')(),component.list('screen')() return (gpu and screen) end function g.copy(x,y,w,h,a,b) component.gpu.copy(x,y,w,h,a,b) end function g.getResolution() return component.gpu.getResolution() end function g.setResolution(w,h) return component.gpu.setResolution(w,h) end function g.getDepth() return component.gpu.maxDepth() end function g.setBG(color) return component.gpu.setBackground(color) end function g.setFG(color) return component.gpu.setForeground(color) end function g.fill(x,y,w,h) return component.gpu.fill(x,y,w,h,' ') end function g.fillc(x,y,w,h,ch) return component.gpu.fill(x,y,w,h,ch) end function g.drawText(x,y,str) return component.gpu.set(x,y,str) end local w,h = g.getResolution() local cx,cy = (w/2),(h/2) f = {} f.addr = fsaddr function f.setBootAddress(addr) f.addr = addr end function f.open(file,mode) return component.filesystem.open(file,mode) end function f.read(handle) return component.filesystem.read(handle,math.huge) end function f.write(handle,str) return component.filesystem.write(handle,str) end function f.close(handle) return component.filesystem.close(handle) end function f.list(dir) return component.filesystem.list(dir or '/') end function f.mkdir(dir) return component.filesystem.makeDirectory(dir) end function f.rename(name1,name2) return component.filesystem.rename(name1,name2) end function f.remove(dir) return component.filesystem.remove(dir) end function f.readfile(file) local hdl,err = f.open(file,'r') if not hdl then error(err) end local buffer = '' repeat local data, err_read = f.read(hdl) if not data and err_read then error(err_read) end buffer = buffer .. (data or '') until not data f.close(hdl) return buffer end function f.loadfile(file) return load(f.readfile(file),'='..file) end function f.runfile(file,argc,args) local prog,err = f.loadfile(file..".lua") if prog then local res = table.pack(xpcall(prog,function(...) return debug.traceback() end,argc,args)) if res[1] then return table.unpack(res,2,res.n) else error(res[2]) end else error(err) end end f.load = f.loadfile f.run = f.runfile std_error = error function error(msg) g.setFG(0xFFFFFF) g.setBG(0x000000) g.fill(1,1,w,h)  local line = 1 local prev = 1 for w in string.gmatch(msg,'()\n') do g.drawText(1,line,msg:sub(prev,w-1)) prev = w+1 line = line+1 end g.drawText(1,line,msg:sub(prev))  local hdl,errf = f.open('error_log.txt','w') if hdl then f.write(hdl,msg..'\n') end f.close(hdl) repeat local e,addr,char,code = computer.pullSignal() until e == 'key_down' and code == 28 computer.shutdown(true) end console = {} function console.Serialize(o,depth) local function ser(o,depth,ind) ind = ind or 1 depth = depth or 3 depth = depth - 1 local indn = 0 local indent = '' while indn < ind do indent = indent .. '  ' indn =  indn + 1 end local retstr = '' if type(o) == "number" then retstr = retstr .. o .. '' elseif type(o) == "boolean" then retstr = retstr .. tostring(o) elseif type(o) == "string" then retstr = retstr .. string.format("%q", o) .. '' elseif type(o) == "table" then if depth <= 0 then return '<'..type(o)..'>' end retstr = retstr .. '{\n' for k,v in pairs(o) do retstr = retstr .. indent .. '' .. k .. '=' retstr = retstr .. ser(v, depth, ind+1) retstr = retstr .. ',\n' end retstr = retstr .. indent:sub(1,indent:len()-2) .. '}' else retstr = retstr .. '<'..type(o)..'>' end return retstr end return ser(o,depth) end function console.ArrayToStr(tabl) local retval = '' for i=1, #tabl do retval = retval ..  tabl[i] end return retval end function console.StrToArray(str) local retval = {} for i=1, #str do table.insert(retval,str:sub(i,i)) end return retval end function console.lineout(str, line) g.fill(1,line,w,1) g.drawText(1,line,str) end function console.lineoutoff(str,line,offs) offs = offs or 1 g.fill(offs,line,w,1) g.drawText(offs,line,str) end console.history = { mem = {}, cmdmem = {}, size = h*10, viewheight = h-1, viewbottom = 1, prevbottom = 1, recallptr = 1, printoffset = 1, lnum = 1, scrspeed = 5, } function console.history.PrintAll() if next(console.history.mem) == nil then return end for i=1, console.history.viewheight-1 do local bot = console.history.viewbottom - (i-1) if bot <= 0 then return end local toprint = console.history.mem[bot] local cpos = console.history.viewheight - (i-1) console.lineoutoff(toprint,cpos,console.history.printoffset) end end function console.history.Update() console.history.PrintAll() end function console.history.ScrollEnd() console.history.prevbottom = console.history.viewbottom console.history.viewbottom = #console.history.mem console.history.PrintAll() end function console.historyScrollTop() console.history.prevbottom = console.history.viewbottom console.history.viewbottom = h-2 console.history.PrintAll() end function console.history.ScrollUp(scr) scr = scr or 1 if #console.history.mem < console.history.viewheight then return end console.history.prevbottom = console.history.viewbottom console.history.viewbottom = console.history.viewbottom - scr if console.history.viewbottom <= console.history.viewheight - 1 then console.history.viewbottom = console.history.viewheight - 1 end console.history.Update() end function console.history.ScrollDown(scr) scr = scr or 1 console.history.prevbottom = console.history.viewbottom console.history.viewbottom = console.history.viewbottom + scr if console.history.viewbottom >= #console.history.mem then console.history.viewbottom = #console.history.mem end console.history.Update() end function console.history.MoveRecall(pos) if next(console.history.cmdmem) == nil then return end pos = pos or 0 console.history.recallptr = console.history.recallptr + pos if console.history.recallptr >= #console.history.cmdmem then console.history.recallptr = #console.history.cmdmem elseif console.history.recallptr <= 1 then console.history.recallptr = 1 end end function console.history.ResetRecall() console.history.recallptr = #console.history.cmdmem end function console.history.Recall() if next(console.history.cmdmem) == nil then return "" end return console.history.cmdmem[console.history.recallptr] end function console.history.Add(str) str = " "..tostring(console.history.lnum).."  | " .. str table.insert(console.history.mem,str) console.history.viewbottom = #console.history.mem console.history.recallptr = #console.history.cmdmem +1 console.history.Update() console.history.lnum = console.history.lnum + 1 end function console.history.AddInp(str) table.insert(console.history.cmdmem,str) console.history.Add(str) end console.input = { buffer = {}, col = 1, printoffset = 1, } function console.input.Print() local out = console.ArrayToStr(console.input.buffer) console.lineoutoff(out,h,console.input.printoffset) end function console.input.SetPrintOffset(offs) console.input.printoffset = offs end function console.input.Append(str) table.insert(console.input.buffer,str) console.input.Print() end function console.input.Insert(str,pos) pos = pos or console.input.col table.insert(console.input.buffer,pos,str) console.input.Print() end function console.input.SetPos(pos) pos = pos or #console.input.buffer if pos < 1 then pos = 1 end if pos > #console.input.buffer then pos = #console.input.buffer + 1 end console.input.col = pos end function console.input.MovePos(mov) local pos = console.input.col + mov console.input.SetPos(pos) end function console.input.GetCharAtPos() return console.input.buffer[console.input.col] end function console.input.GetString() return console.ArrayToStr(console.input.buffer) end function console.input.DelChar() table.remove(console.input.buffer,console.input.col) console.input.Print() end function console.input.Clear() console.input.buffer = {} console.input.col = 1 console.input.Print() end function console.input.SetBuffer(str) console.input.buffer = console.StrToArray(str) console.input.col = #console.input.buffer + 1 console.input.Print() end function console.print(str) if type(str) == 'table' then str = console.Serialize(str) else str = tostring(str) end local prev = 1 for w in string.gmatch(str,'()\n') do console.history.Add(str:sub(prev,w-1)) prev = w+1 end console.history.Add(str:sub(prev)) end function console.Run()  g.fill(1,2,w,h)  g.setFG(0x000000) g.setBG(0xFFFFFF) g.fill(1,1,w,1) g.drawText(1,1,"  ".._osname.." ".._osversion) g.setFG(0xFFFFFF) g.setBG(0x000000)  local console_header = "#> " local blinkon = true local hist = console.history local inp = console.input print = console.print console.lineout(console_header,h) inp.SetPrintOffset(#console_header + 1)  print("* F12 to restart  *") print("* F10 to shutdown *")  while true do local evt = table.pack(computer.pullSignal(0.4)) if evt[1] == 'key_down' then if evt[4] == 88 then computer.shutdown(true) end if evt[4] == 68 then computer.shutdown() end  if evt[4] == 28 then hist.AddInp(inp.GetString()) console.lineout(console_header,h)  local luacmd = inp.GetString()  local loaded,lderr = load(luacmd,'=cinput') if loaded then local res,err = xpcall(loaded,function(msg) return msg ..'\n'.. debug.traceback() end) if not res and err then print(err) end elseif not loaded and lderr then print(lderr) else print('Unknown Command') end  inp.Clear() elseif evt[4] == 14 then inp.MovePos(-1) inp.DelChar() hist.ResetRecall() elseif evt[4] == 200 then hist.MoveRecall(-1) inp.SetBuffer(hist.Recall()) elseif evt[4] == 208 then hist.MoveRecall(1) inp.SetBuffer(hist.Recall()) elseif evt[4] == 203 then inp.MovePos(-1) elseif evt[4] == 205 then inp.MovePos(1) elseif evt[4] == 199 then inp.MovePos(-99999) elseif evt[4] == 207 then inp.MovePos(99999) elseif evt[3] ~= 0 then local char = string.char(evt[3]) inp.Insert(char) inp.MovePos(1) end elseif evt[1] == 'scroll' then if evt[5] > 0 then hist.ScrollUp(hist.scrspeed) elseif evt[5] < 0 then hist.ScrollDown(hist.scrspeed) end end if blinkon then local posx = console.input.col + console.input.printoffset - 1 g.setBG(0xFFFFFF) g.fill(posx,h,1,1) g.setBG(0x000000) blinkon = false else inp.Print() blinkon = true end end end local function main() console.Run() end if component.filesystem.exists('autorun.lua') then f.runfile('autorun') end local res,err = xpcall(main,function(msg) return msg ..'\n'.. debug.traceback() end) if not res and err then error(err) end computer.shutdown()